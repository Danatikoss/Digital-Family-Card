// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hTjBEP8FCGAAQfJ6SFrb1N
// Component: UOzj8GARU_zl
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import TextInput from "../../TextInput"; // plasmic-import: K424EVBUHEQE/component
import CustomButton from "../../CustomButton"; // plasmic-import: Q0g8xwMS74XO/component
import Button from "../../Button"; // plasmic-import: PIsqyDu_Ruin/component
import { useScreenVariants as useScreenVariantss3PJnunok0If } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: s3pJnunok0If/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: hTjBEP8FCGAAQfJ6SFrb1N/projectcss
import sty from "./PlasmicEmailForm.module.css"; // plasmic-import: UOzj8GARU_zl/css

createPlasmicElementProxy;

export const PlasmicEmailForm__VariantProps = new Array();

export const PlasmicEmailForm__ArgProps = new Array(
  "buttonText",
  "namePlaceholder",
  "nameLabel",
  "emailPlaceholder",
  "emailLabel",
  "messageLabel",
  "titleText"
);

const $$ = {};

function PlasmicEmailForm__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "emailInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "nameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "message.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "success",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantss3PJnunok0If()
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"section18"}
      data-plasmic-override={overrides.section18}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.section18
      )}
      id={"Contact"}
    >
      <div
        data-plasmic-name={"text19"}
        data-plasmic-override={overrides.text19}
        className={classNames(projectcss.all, sty.text19)}
      >
        <div
          data-plasmic-name={"h15"}
          data-plasmic-override={overrides.h15}
          className={classNames(projectcss.all, projectcss.__wab_text, sty.h15)}
        >
          {hasVariant(globalVariants, "screen", "mobileOnly") ? (
            <React.Fragment>
              {(() => {
                try {
                  return $props.titleText;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Contact Us";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          ) : (
            <React.Fragment>
              {(() => {
                try {
                  return $props.titleText;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Contact Us";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          )}
        </div>
      </div>
      <Stack__
        as={"div"}
        data-plasmic-name={"frame30"}
        data-plasmic-override={overrides.frame30}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame30)}
      >
        <div
          data-plasmic-name={"frame48"}
          data-plasmic-override={overrides.frame48}
          className={classNames(projectcss.all, sty.frame48)}
        />

        <Stack__
          as={"div"}
          data-plasmic-name={"frame642"}
          data-plasmic-override={overrides.frame642}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame642)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"frame643"}
            data-plasmic-override={overrides.frame643}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame643)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xsqn
              )}
            >
              {"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 e-mail"}
            </div>
            <TextInput
              data-plasmic-name={"emailInput"}
              data-plasmic-override={overrides.emailInput}
              className={classNames("__wab_instance", sty.emailInput)}
              onChange={async (...eventArgs) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["emailInput", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);
                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              type={"email"}
              value={
                generateStateValueProp($state, ["emailInput", "value"]) ?? ""
              }
            />

            <div
              data-plasmic-name={"kod2"}
              data-plasmic-override={overrides.kod2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.kod2
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.nameLabel;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Name";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              ) : (
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.namePlaceholder;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Name";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              )}
            </div>
            <TextInput
              data-plasmic-name={"nameInput"}
              data-plasmic-override={overrides.nameInput}
              className={classNames("__wab_instance", sty.nameInput)}
              onChange={async (...eventArgs) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["nameInput", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);
                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              type={"text"}
              value={
                generateStateValueProp($state, ["nameInput", "value"]) ?? ""
              }
            />
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"frame644"}
            data-plasmic-override={overrides.frame644}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame644)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__lMqR
              )}
            >
              {
                "\u0422\u0435\u043a\u0441\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f"
              }
            </div>
            <textarea
              data-plasmic-name={"message"}
              data-plasmic-override={overrides.message}
              className={classNames(
                projectcss.all,
                projectcss.textarea,
                sty.message
              )}
              onChange={async (...eventArgs) => {
                (e => {
                  generateStateOnChangeProp($state, ["message", "value"])(
                    e.target.value
                  );
                }).apply(null, eventArgs);
              }}
              placeholder={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? (() => {
                      try {
                        return undefined;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return undefined;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "undefined";
                        }
                        throw e;
                      }
                    })()
              }
              ref={ref => {
                $refs["message"] = ref;
              }}
              value={generateStateValueProp($state, ["message", "value"]) ?? ""}
            />
          </Stack__>
        </Stack__>
        <div
          data-plasmic-name={"frame49"}
          data-plasmic-override={overrides.frame49}
          className={classNames(projectcss.all, sty.frame49)}
        />

        <CustomButton
          data-plasmic-name={"customButton"}
          data-plasmic-override={overrides.customButton}
          className={classNames("__wab_instance", sty.customButton)}
          destination={"/#Contact"}
          title={"Send message"}
        />

        <Button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button)}
          onClick={async event => {
            const $steps = {};
            $steps["updateLoading"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["loading"]
                    },
                    operation: 4,
                    value: (() => {
                      return true;
                    })()
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;
                    const oldValue = $stateGet(objRoot, variablePath);
                    $stateSet(objRoot, variablePath, !oldValue);
                    return !oldValue;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateLoading"] != null &&
              typeof $steps["updateLoading"] === "object" &&
              typeof $steps["updateLoading"].then === "function"
            ) {
              $steps["updateLoading"] = await $steps["updateLoading"];
            }
            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (async () => {
                        const url =
                          "https://nocodb.nitec-ai.kz/api/v2/tables/m2eq880r6pncs48/records";
                        const data = JSON.stringify({
                          Email: $state.emailInput.value,
                          Name: $state.nameInput.value,
                          Message: $state.message.value
                        });
                        async function getData() {
                          $state.loading = true;
                          await fetch(url, {
                            method: "POST",
                            headers: {
                              "xc-token":
                                "J0byhEHoKO2dS-oE5uMirWF-Xc1Gprn7YdoP4S9Q",
                              "Content-Type": "application/json"
                            },
                            body: data
                          })
                            .then(response => {
                              if (!response.ok) {
                                throw new Error(
                                  "Network response was not ok " +
                                    response.statusText
                                );
                              }
                              return response.json();
                            })
                            .then(data => {
                              $state.success = true;
                              return data;
                            })
                            .catch(error => {
                              console.error(
                                "There was a problem with your fetch operation:",
                                error
                              );
                            });
                          $state.loading = false;
                        }
                        return async function getData() {
                          $state.loading = true;
                          await fetch(url, {
                            method: "POST",
                            headers: {
                              "xc-token":
                                "J0byhEHoKO2dS-oE5uMirWF-Xc1Gprn7YdoP4S9Q",
                              "Content-Type": "application/json"
                            },
                            body: data
                          })
                            .then(response => {
                              if (!response.ok) {
                                throw new Error(
                                  "Network response was not ok " +
                                    response.statusText
                                );
                              }
                              return response.json();
                            })
                            .then(data => {
                              $state.success = true;
                              return data;
                            })
                            .catch(error => {
                              console.error(
                                "There was a problem with your fetch operation:",
                                error
                              );
                            });
                          $state.loading = false;
                        };
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
            $steps["updateLoading2"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["loading"]
                    },
                    operation: 4,
                    value: (() => {
                      return false;
                    })()
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;
                    const oldValue = $stateGet(objRoot, variablePath);
                    $stateSet(objRoot, variablePath, !oldValue);
                    return !oldValue;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateLoading2"] != null &&
              typeof $steps["updateLoading2"] === "object" &&
              typeof $steps["updateLoading2"].then === "function"
            ) {
              $steps["updateLoading2"] = await $steps["updateLoading2"];
            }
          }}
        >
          {hasVariant(globalVariants, "screen", "mobileOnly") ? (
            <React.Fragment>
              {(() => {
                try {
                  return $props.buttonText;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Send message";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          ) : (
            <React.Fragment>
              {(() => {
                try {
                  return (() => {
                    return $state.loading ? "..." : $props.buttonText;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Button";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          )}
        </Button>
        {(() => {
          try {
            return $state.success;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__oMi61
            )}
          >
            {
              "\u0414\u0430\u043d\u043d\u044b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b"
            }
          </div>
        ) : null}
      </Stack__>
    </Stack__>
  );
}

const PlasmicDescendants = {
  section18: [
    "section18",
    "text19",
    "h15",
    "frame30",
    "frame48",
    "frame642",
    "frame643",
    "emailInput",
    "kod2",
    "nameInput",
    "frame644",
    "message",
    "frame49",
    "customButton",
    "button"
  ],

  text19: ["text19", "h15"],
  h15: ["h15"],
  frame30: [
    "frame30",
    "frame48",
    "frame642",
    "frame643",
    "emailInput",
    "kod2",
    "nameInput",
    "frame644",
    "message",
    "frame49",
    "customButton",
    "button"
  ],

  frame48: ["frame48"],
  frame642: [
    "frame642",
    "frame643",
    "emailInput",
    "kod2",
    "nameInput",
    "frame644",
    "message"
  ],

  frame643: ["frame643", "emailInput", "kod2", "nameInput"],
  emailInput: ["emailInput"],
  kod2: ["kod2"],
  nameInput: ["nameInput"],
  frame644: ["frame644", "message"],
  message: ["message"],
  frame49: ["frame49"],
  customButton: ["customButton"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEmailForm__ArgProps,
          internalVariantPropNames: PlasmicEmailForm__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEmailForm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "section18") {
    func.displayName = "PlasmicEmailForm";
  } else {
    func.displayName = `PlasmicEmailForm.${nodeName}`;
  }
  return func;
}

export const PlasmicEmailForm = Object.assign(
  // Top-level PlasmicEmailForm renders the root element
  makeNodeComponent("section18"),
  {
    // Helper components rendering sub-elements
    text19: makeNodeComponent("text19"),
    h15: makeNodeComponent("h15"),
    frame30: makeNodeComponent("frame30"),
    frame48: makeNodeComponent("frame48"),
    frame642: makeNodeComponent("frame642"),
    frame643: makeNodeComponent("frame643"),
    emailInput: makeNodeComponent("emailInput"),
    kod2: makeNodeComponent("kod2"),
    nameInput: makeNodeComponent("nameInput"),
    frame644: makeNodeComponent("frame644"),
    message: makeNodeComponent("message"),
    frame49: makeNodeComponent("frame49"),
    customButton: makeNodeComponent("customButton"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicEmailForm
    internalVariantProps: PlasmicEmailForm__VariantProps,
    internalArgProps: PlasmicEmailForm__ArgProps
  }
);

export default PlasmicEmailForm;
/* prettier-ignore-end */
