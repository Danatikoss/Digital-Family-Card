// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hTjBEP8FCGAAQfJ6SFrb1N
// Component: Q0g8xwMS74XO
import * as React from "react";
import {
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: hTjBEP8FCGAAQfJ6SFrb1N/projectcss
import sty from "./PlasmicCustomButton.module.css"; // plasmic-import: Q0g8xwMS74XO/css
import IconLeftIcon from "./icons/PlasmicIcon__IconLeft"; // plasmic-import: kTzn8doSN5w-/icon
import VectorIcon from "./icons/PlasmicIcon__Vector"; // plasmic-import: aK3h-Hgy_pFA/icon

createPlasmicElementProxy;

export const PlasmicCustomButton__VariantProps = new Array();

export const PlasmicCustomButton__ArgProps = new Array("destination", "title");

const $$ = {};

function PlasmicCustomButton__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <Stack__
      as={PlasmicLink__}
      data-plasmic-name={"button"}
      data-plasmic-override={overrides.button}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.button,
        "button"
      )}
      href={(() => {
        try {
          return $props.destination;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
      platform={"react"}
      target={"_blank"}
    >
      {false ? (
        <IconLeftIcon
          className={classNames(projectcss.all, sty.svg__vvm8)}
          role={"img"}
        />
      ) : null}
      <div
        data-plasmic-name={"pushIt"}
        data-plasmic-override={overrides.pushIt}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.pushIt
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.title;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "NITEC";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <VectorIcon
        className={classNames(projectcss.all, sty.svg__biZpe, "arrow")}
        role={"img"}
      />
    </Stack__>
  );
}

const PlasmicDescendants = {
  button: ["button", "pushIt"],
  pushIt: ["pushIt"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCustomButton__ArgProps,
          internalVariantPropNames: PlasmicCustomButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCustomButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "button") {
    func.displayName = "PlasmicCustomButton";
  } else {
    func.displayName = `PlasmicCustomButton.${nodeName}`;
  }
  return func;
}

export const PlasmicCustomButton = Object.assign(
  // Top-level PlasmicCustomButton renders the root element
  makeNodeComponent("button"),
  {
    // Helper components rendering sub-elements
    pushIt: makeNodeComponent("pushIt"),
    // Metadata about props expected for PlasmicCustomButton
    internalVariantProps: PlasmicCustomButton__VariantProps,
    internalArgProps: PlasmicCustomButton__ArgProps
  }
);

export default PlasmicCustomButton;
/* prettier-ignore-end */
